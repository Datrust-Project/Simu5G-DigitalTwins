In this example the network consists of one (real) UEs connected to one gNB.

The UE runs a(n external) application that sends periodic 1000-byte packets 
to a(n external) receiver application.

IP addresses and routing tables are set up by using mrt files (see "routing_files" folder).
 
Communication between the simulator and the host OS is realized using namespaces linked
together via virtual ethernet (veth) interfaces. 
In particular, we configure the following scenario:

+++++++++++++++++++++++++     +++++++++++++++++++++++++     +++++++++++++++++++++++++
+     Namespace ns1     +     +         Simu5G        +     +     Namespace ns2     +
+                       +     +                       +     +                       +
+  Client App     [veth1]<--->[sim-veth1]   [sim-veth2]<--->[veth2]     Server App  +
+            192.168.2.2+     +                       +     +192.168.3.2            +
+                       +     +                       +     +                       +
+++++++++++++++++++++++++     +++++++++++++++++++++++++     +++++++++++++++++++++++++


 
=== HOW TO BUILD AND RUN ===

1) Make sure that the emulation feature is enabled in the INET project:

- via the IDE: right-click on the 'inet' folder in the Project Explorer -> Properties;
               select OMNeT++ -> Project Features; 
               tick the box "Network emulation support".
- via the command line: in the root INET folder, type 'opp_featuretool enable NetworkEmulationSupport'.

  If the feature was disabled, recompile INET with the command 'make' (in the root INET folder).  


2) In order to be able to send/receive packets through sockets, set the application permissions: 

    sudo setcap cap_net_raw,cap_net_admin=eip path/to/opp_run
    sudo setcap cap_net_raw,cap_net_admin=eip path/to/opp_run_dbg
    sudo setcap cap_net_raw,cap_net_admin=eip path/to/opp_run_release


3) Compile Simu5G from the command line by running (in the root Simu5G folder):
    $ . setenv
	$ make makefiles
	$ make 
	
	
4) Setup the environment by typing:

    ./setup.sh	 
	 	
	 	
5) Run the receiver application, e.g. by typing the command:
  	    
  	(in a new terminal window) sudo ip netns exec ns1 ./emulation_receiver -p udp
  	
  	
6) Run the simulation by typing:

   ./run.sh -r <RUN_NUMBER>
    
   where RUN_NUMBER=0 --> 3 background cells
         RUN_NUMBER=1 --> 6 background cells
         RUN_NUMBER=2 --> 9 background cells
 
   
7) Run the sender application, e.g. by typing the command:
 
    (in a new terminal window) sudo ip netns exec ns2 ./emulation_sender -h 192.168.2.2 -p udp -s 1000 -t 1 -d 60 -o test
    
   where -h option specifies the address of the NAT router
         -p specifies the L4 protocol
         -s is the size of application messages
         -t is the sending interval
         -d is the total duration of the application
         -o specifies the output subfolder in folder "stats"  
          
        
8) Clean the environment by typing:

    ./teardown.sh
   
============================
