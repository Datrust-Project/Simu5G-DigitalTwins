[General]
cmdenv-express-mode = true
image-path=../../../images
output-scalar-file-append = false
seed-set = ${repetition}

**.bgUE[*].generator.**.vector-recording = true
**.nrPhy.**.vector-recording = true
**.vector-recording = false

**.routingRecorder.enabled = false
**.networkConfiguratorModule = ""
#**.fcsMode = "computed"
#**.crcMode = "computed"
# *

**.mobility.constraintAreaMaxX = 1000m
**.mobility.constraintAreaMaxY = 1000m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 0m
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.initFromDisplayString = false

############### Phy layer parameters ################
**.amcType = "NRAmc"
**.pilotMode = "ROBUST_CQI" 
**.targetBler = 0.01
**.blerShift = 5  
**.fbPeriod = 40 

############### IPv4 configurator config #################
*.configurator.config = xmldoc("./demo.xml")

############### eNodeB configuration #################
*.gnb.mobility.initialX = 450m
*.gnb.mobility.initialY = 300m

############## ue configuration ##################
# connect the ue's NIC to the corresponding serving gnb
*.ue*.macCellId = 1
*.ue*.masterId = 1
*.ue*.nrMacCellId = 1
*.ue*.nrMasterId = 1

# ue position
*.ue*.mobilityType = "StationaryMobility"
*.ue*.mobility.initialX = 450m
*.ue*.mobility.initialY = 350m

*.bkUe[*].macCellId = 1
*.bkUe[*].masterId = 1
*.bkUe[*].nrMacCellId = 1
*.bkUe[*].nrMasterId = 1

# ue position
*.bkUe[*].mobilityType = "StationaryMobility"
*.bkUe[*].mobility.initialX = uniform(150m,750m)
*.bkUe[*].mobility.initialY = uniform(0m,600m)




#############################################################################
# BgSingleCellValidation
#
# This scenario is used to evaluate background UEs in a single cell scenario
# The network contains one gNB and one UE. This scenario is extended by two 
# configurations: one adding simulated UEs, one adding background UEs 
[Config BgSingleCellValidation]
network = simu5g.simulations.NR.pimrc_extension.ClientServerExample
num-rngs = 2
sim-time-limit = 20s
warmup-period = 1s
repeat = 10

############### IPv4 configurator config #################
**.networkConfiguratorModule = "configurator"
*.configurator.config = xmldoc("./demo.xml")

**.fading = false
**.shadowing = false
**.downlink_interference = false
**.uplink_interference = false
**.bgCell_interference = false
**.extCell_interference = false

############### CA configuration ######################## 
*.carrierAggregation.numComponentCarriers = ${ca=1}
*.carrierAggregation.componentCarrier[*].numerologyIndex = ${u=0}
*.carrierAggregation.componentCarrier[0].carrierFrequency = 2GHz
*.carrierAggregation.componentCarrier[1].carrierFrequency = 700MHz
*.carrierAggregation.componentCarrier[2].carrierFrequency = 6GHz
*.carrierAggregation.componentCarrier[*].numBands = ${rbs=100}

*.gnb.cellularNic.numCarriers = ${ca}
*.gnb.cellularNic.channelModel[*].componentCarrierIndex = ancestorIndex(0)
*.ue.cellularNic.numNRCarriers = 1
*.ue.cellularNic.nrChannelModel[0].componentCarrierIndex = 0
*.bkUe[*].cellularNic.numNRCarriers = 1
*.bkUe[*].cellularNic.nrChannelModel[0].componentCarrierIndex = ancestorIndex(2) % ${ca}


*.gnb.mobility.initialX = 500m
*.gnb.mobility.initialY = 500m
*.ue*.mobility.initialX = 500m
*.ue*.mobility.initialY = 500m + ${dist=300m}


############# Traffic configuration #################
*.ue.numApps = 1
*.server.numApps = 1

*.server.app[*].typename = "UdpEchoApp"
*.server.app[*].localPort = 5000+ancestorIndex(0)

*.ue.app[*].typename = "UdpBasicApp"
*.ue.app[*].destAddresses = "server" 
*.ue.app[*].destPort = 5000+ancestorIndex(0)
*.ue.app[*].localPort = 6000+ancestorIndex(0)
*.ue.app[*].startTime = uniform(0s,0.05s)
*.ue.app[*].messageLength = ${msgLen=1000}B
*.ue.app[*].sendInterval = ${sndInt=40ms}   # 200 kbps

############### Phy layer parameters ################
**.amcType = "NRAmc"
**.pilotMode = "AVG_CQI" 
**.targetBler = 0.01
**.blerShift = 5  
**.fbPeriod = 40 

**.bgUE[*].generator.**.vector-recording = false
**.nrPhy.**.vector-recording = false
**.vector-recording = false

# ---------------------------------------------------------#


#############################################################
# This configuration uses simulated UEs
#
[Config BgSingleCellValidation-simulated]
extends = BgSingleCellValidation

*.bkUe[*].mobility.rng-0 = 1
*.bkUe[*].macCellId = 1
*.bkUe[*].masterId = 1
*.bkUe[*].nrMacCellId = 1
*.bkUe[*].nrMasterId = 1
*.bkUe[*].mobility.initialX = uniform(100m,900m)
*.bkUe[*].mobility.initialY = uniform(100m,900m)
*.numBkUEs = ${numBkUEs=0,25,50,75,100,125,150,175,200}


###### Apps configuration ########
*.bgServerDl.numApps = ${numBkUEs}
*.bgServerUl.numApps = ${numBkUEs}
*.bkUe[*].numApps = 2

*.bkUe[*].app[0].typename = "CbrSender"
*.bkUe[*].app[0].destAddress = "bgServerUl" 
*.bkUe[*].app[0].destPort = 5000+ancestorIndex(1)
*.bkUe[*].app[0].localPort = 6000+ancestorIndex(0)
*.bkUe[*].app[0].startTime = uniform(0s,0.05s)
*.bkUe[*].app[0].PacketSize = ${msgLen}
*.bkUe[*].app[0].sampling_time = ${sndInt}   # 200 kbps

*.bgServerUl.app[*].typename = "CbrReceiver"
*.bgServerUl.app[*].localPort = 5000+ancestorIndex(0)

*.bgServerDl.app[*].typename = "CbrSender"
*.bgServerDl.app[*].destAddress = "bkUe[" + string(ancestorIndex(0)) + "]" 
*.bgServerDl.app[*].destPort = 5000
*.bgServerDl.app[*].localPort = 6000+ancestorIndex(0)
*.bgServerDl.app[*].startTime = uniform(0s,0.05s)
*.bgServerDl.app[*].PacketSize = ${msgLen}
*.bgServerDl.app[*].sampling_time = ${sndInt}   # 200 kbps

*.bkUe[*].app[1].typename = "CbrReceiver"
*.bkUe[*].app[1].localPort = 5000

*.binder.printTrafficGeneratorConfig = true
*.fakeParameter = ${numBgCells=0}

output-scalar-file = ${resultdir}/${configname}/ca=${ca}-u=${u}-rbs=${rbs}-msgLen=${msgLen}-sndInt=${sndInt}-bkUEs=${numBkUEs}-${repetition}.sca
output-vector-file = ${resultdir}/${configname}/ca=${ca}-u=${u}-rbs=${rbs}-msgLen=${msgLen}-sndInt=${sndInt}-bkUEs=${numBkUEs}-${repetition}.vec

#------------------------------------#



#########################################################
# This configuration uses background UEs
#
[Config BgSingleCellValidation-generated]
extends = BgSingleCellValidation


############# Background traffic configuration #################
**.bgTrafficGenerator[0].numBgUes = ${numBkUEs=0,25,50,75,100,125,150,175,200}
**.bgTrafficGenerator[0].useRandomCqi = ${randomCqi=true}
**.bgTrafficGenerator[0].bgUE[*].mobility.rng-0 = 1
**.bgTrafficGenerator[0].bgUE[*].mobility.initialX = uniform(100m,900m)
**.bgTrafficGenerator[0].bgUE[*].mobility.initialY = uniform(100m,900m)
**.bgTrafficGenerator[0].bgUE[*].trafficGeneratorType = "TrafficGeneratorCbr"
**.bgTrafficGenerator[0].bgUE[*].generator.startTimeDl = uniform(0s,0.05s)
**.bgTrafficGenerator[0].bgUE[*].generator.startTimeUl = uniform(0s,0.05s)
**.bgTrafficGenerator[0].bgUE[*].generator.packetSizeDl = ${msgLen}B
**.bgTrafficGenerator[0].bgUE[*].generator.packetSizeUl = ${msgLen}B
**.bgTrafficGenerator[0].bgUE[*].generator.periodDl = ${sndInt}
**.bgTrafficGenerator[0].bgUE[*].generator.periodUl = ${sndInt}
include trafficGeneratorConfig.ini

output-scalar-file = ${resultdir}/${configname}/ca=${ca}-u=${u}-rbs=${rbs}-msgLen=${msgLen}-sndInt=${sndInt}-bkUEs=${numBkUEs}-randomCqi=${randomCqi}-${repetition}.sca
output-vector-file = ${resultdir}/${configname}/ca=${ca}-u=${u}-rbs=${rbs}-msgLen=${msgLen}-sndInt=${sndInt}-bkUEs=${numBkUEs}-randomCqi=${randomCqi}-${repetition}.vec





#####################################################################################
# BgMulticellValidation-simulated
#
# This scenario is used as baseline for the multicell scenario with Background cells
# The network contains one central gNB, surrounded by three gNBs. Each gNB serves a 
# number of UEs (completely modeled) 
[Config BgMulticellValidation]
sim-time-limit = 10s
warmup-period = 1s
repeat = 10
num-rngs = 2


**.fading = false
**.shadowing = false
**.downlink_interference = true
**.uplink_interference = true
**.bgCell_interference = true

############### IPv4 configurator config #################
**.networkConfiguratorModule = "configurator"
*.configurator.config = xmldoc("./demo.xml")

**.mobility.constraintAreaMaxX = 2000m
**.mobility.constraintAreaMaxY = 2000m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 0m
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.initFromDisplayString = false

############## deployment #######################
*.gnb.mobility.initialX = 1000m
*.gnb.mobility.initialY = 1000m
*.ue.mobility.initialX = 1000m
*.ue.mobility.initialY = 1000m + ${dist=50m,125m,200m}

############## ue configuration ##################
# connect the ue's NIC to the corresponding serving gnb
*.ue*.macCellId = 0
*.ue*.masterId = 0
*.ue*.nrMacCellId = 1
*.ue*.nrMasterId = 1

############### CA configuration ######################## 
*.carrierAggregation.numComponentCarriers = 1
*.carrierAggregation.componentCarrier[0].numerologyIndex = ${u=0}
*.carrierAggregation.componentCarrier[0].numBands = ${rbs=100}
*.carrierAggregation.componentCarrier[0].carrierFrequency = 2GHz

############### AMC parameters ################
**.amcType = "NRAmc"
**.pilotMode = ${cqiMode="AVG_CQI"}
**.targetBler = 0.01
**.blerShift = ${blerShift=5}  
**.fbPeriod = 40 



#####################################################################################
# BgMulticellValidation-simulated
#
# This scenario is used as baseline for the multicell scenario with Background cells
# The network contains one central gNB, surrounded by three gNBs. Each gNB serves a 
# number of UEs (completely modeled) 
[Config BgMulticellValidation-simulated]
network = simu5g.simulations.NR.pimrc_extension.MulticellValidation
extends = BgMulticellValidation


############### gNodeBs configuration #################
*.extGnb0.mobility.initialX = 750m
*.extGnb0.mobility.initialY = 567m
*.extGnb1.mobility.initialX = 1500m
*.extGnb1.mobility.initialY = 1000m
*.extGnb2.mobility.initialX = 750m
*.extGnb2.mobility.initialY = 1433m
*.extGnb3.mobility.initialX = 1250m
*.extGnb3.mobility.initialY = 567m
*.extGnb4.mobility.initialX = 1250m
*.extGnb4.mobility.initialY = 1433m
*.extGnb5.mobility.initialX = 500m
*.extGnb5.mobility.initialY = 1000m


**.macCellId = 0
**.masterId = 0
*.bkUe[*].nrMacCellId = 1
*.bkUe[*].nrMasterId = 1
*.extBkUe0[*].nrMacCellId = 2
*.extBkUe0[*].nrMasterId = 2
*.extBkUe1[*].nrMacCellId = 3
*.extBkUe1[*].nrMasterId = 3
*.extBkUe2[*].nrMacCellId = 4
*.extBkUe2[*].nrMasterId = 4
*.extBkUe3[*].nrMacCellId = 5
*.extBkUe3[*].nrMasterId = 5
*.extBkUe4[*].nrMacCellId = 6
*.extBkUe4[*].nrMasterId = 6
*.extBkUe5[*].nrMacCellId = 7
*.extBkUe5[*].nrMasterId = 7

*.numBkUEs = ${numBkUEs=75}
*.bkUe[*].mobility.initialX = uniform(750m,1250m)
*.bkUe[*].mobility.initialY = uniform(750m,1250m)
*.numExtBkUEs* = ${numBkUEs}
*.extBkUe0[*].mobility.initialX = uniform(500m,1000m)
*.extBkUe0[*].mobility.initialY = uniform(317m,817m)
*.extBkUe1[*].mobility.initialX = uniform(1250m,1750m)
*.extBkUe1[*].mobility.initialY = uniform(750m,1250m)
*.extBkUe2[*].mobility.initialX = uniform(500m,1000m)
*.extBkUe2[*].mobility.initialY = uniform(1183m,1933m)
*.extBkUe3[*].mobility.initialX = uniform(1000m,1500m)
*.extBkUe3[*].mobility.initialY = uniform(317m,817m)
*.extBkUe4[*].mobility.initialX = uniform(1000m,1500m)
*.extBkUe4[*].mobility.initialY = uniform(1183m,1933m)
*.extBkUe5[*].mobility.initialX = uniform(250m,750m)
*.extBkUe5[*].mobility.initialY = uniform(750m,1250m)

*.bkUe[*].mobility.rng-0 = 1
*.extBkUe*[*].mobility.rng-0 = 1

############# Traffic configuration #################

*.ue.numApps = 1
*.bkUe[*].numApps = 2
*.extBkUe?[*].numApps = 2
*.server.numApps = 1 + ${numBkUEs}
*.extServer?.numApps = ${numBkUEs}

*.serverUl.numApps = 1 + ${numBkUEs}
*.extServerUl?.numApps = ${numBkUEs}

# --- Observed traffic --- #
*.server.app[0].typename = "UdpEchoApp"
*.server.app[0].localPort = 5000
*.ue.app[0].typename = "UdpBasicApp"
*.ue.app[0].destAddresses = "server" 
*.ue.app[0].destPort = 5000+ancestorIndex(0)
*.ue.app[0].localPort = 6000+ancestorIndex(0)
*.ue.app[0].startTime = uniform(0s,0.5s)
*.ue.app[0].messageLength = ${msgLen}B
*.ue.app[0].sendInterval = ${sndInt}

# --- DL traffic configuration --- #
*.server.app[1..].typename = "CbrSender"
*.server.app[1..].localPort = 5000+ancestorIndex(0)
*.server.app[1..].destPort = 1000
*.server.app[1..].startTime = uniform(0s,0.5s)
*.server.app[1..].PacketSize = ${msgLen=1000}
*.server.app[1..].sampling_time = ${sndInt=40ms}
*.server.app[1..].destAddress = "bkUe["+string(ancestorIndex(0)-1)+"]"

*.extServer?.app[*].typename = "CbrSender"
*.extServer?.app[*].localPort = 5000+ancestorIndex(0)
*.extServer0.app[*].destAddress = "extBkUe0["+string(ancestorIndex(0))+"]"
*.extServer1.app[*].destAddress = "extBkUe1["+string(ancestorIndex(0))+"]"
*.extServer2.app[*].destAddress = "extBkUe2["+string(ancestorIndex(0))+"]"
*.extServer3.app[*].destAddress = "extBkUe3["+string(ancestorIndex(0))+"]"
*.extServer4.app[*].destAddress = "extBkUe4["+string(ancestorIndex(0))+"]"
*.extServer5.app[*].destAddress = "extBkUe5["+string(ancestorIndex(0))+"]"
*.extServer?.app[*].destPort = 1000
*.extServer?.app[*].startTime = uniform(0s,0.5s)
*.extServer?.app[*].PacketSize = ${msgLen}
*.extServer?.app[*].sampling_time = ${sndInt}

*.bkUe[*].app[0].typename = "CbrReceiver"
*.bkUe[*].app[0].localPort = 1000
*.extBkUe?[*].app[0].typename = "CbrReceiver"
*.extBkUe?[*].app[0].localPort = 1000


# --- UL traffic configuration --- #
*.bkUe[*].app[1].typename = "CbrSender"
*.bkUe[*].app[1].startTime = uniform(0s,0.5s)
*.bkUe[*].app[1].PacketSize = ${msgLen}
*.bkUe[*].app[1].sampling_time = ${sndInt}
*.bkUe[*].app[1].destAddress = "serverUl"
*.bkUe[*].app[1].destPort = 1001+ancestorIndex(1)

*.extBkUe?[*].app[1].typename = "CbrSender"
*.extBkUe?[*].app[1].localPort = 5000+ancestorIndex(0)
*.extBkUe0[*].app[1].destAddress = "extServerUl0"
*.extBkUe1[*].app[1].destAddress = "extServerUl1"
*.extBkUe2[*].app[1].destAddress = "extServerUl2"
*.extBkUe3[*].app[1].destAddress = "extServerUl3"
*.extBkUe4[*].app[1].destAddress = "extServerUl4"
*.extBkUe5[*].app[1].destAddress = "extServerUl5"
*.extBkUe?[*].app[1].destPort = 1000+ancestorIndex(1)
*.extBkUe?[*].app[1].startTime = uniform(0s,0.5s)
*.extBkUe?[*].app[1].PacketSize = ${msgLen}
*.extBkUe?[*].app[1].sampling_time = ${sndInt}

*.serverUl.app[*].typename = "CbrReceiver"
*.serverUl.app[*].localPort = 1000+ancestorIndex(0)
*.extServerUl?.app[*].typename = "CbrReceiver"
*.extServerUl?.app[*].localPort = 1000+ancestorIndex(0)

*.binder.printTrafficGeneratorConfig = true

output-scalar-file = ${resultdir}/${configname}/u=${u}-rbs=${rbs}-msgLen=${msgLen}-sndInt=${sndInt}-bkUEs=${numBkUEs}-ueDist=${dist}-${repetition}.sca
output-vector-file = ${resultdir}/${configname}/u=${u}-rbs=${rbs}-msgLen=${msgLen}-sndInt=${sndInt}-bkUEs=${numBkUEs}-ueDist=${dist}-${repetition}.vec

#------------------------------------#




[Config BgMulticellValidation-generated]
network = simu5g.simulations.NR.pimrc_extension.MulticellBackgroundValidation
extends = BgMulticellValidation

############### Bg Cells configuration #################
*.numBgCell = 6
*.bgCell[0].mobility.initialX = 750m
*.bgCell[0].mobility.initialY = 567m
*.bgCell[1].mobility.initialX = 1500m
*.bgCell[1].mobility.initialY = 1000m
*.bgCell[2].mobility.initialX = 750m
*.bgCell[2].mobility.initialY = 1433m
*.bgCell[3].mobility.initialX = 1250m
*.bgCell[3].mobility.initialY = 567m
*.bgCell[4].mobility.initialX = 1250m
*.bgCell[4].mobility.initialY = 1433m
*.bgCell[5].mobility.initialX = 500m
*.bgCell[5].mobility.initialY = 1000m
*.bgCell[*].bgBaseStation.isNr = true
*.bgCell[*].bgBaseStation.numBands = ${rbs}
*.bgCell[*].bgBaseStation.carrierFrequency = 2GHz
*.bgCell[*].bgBaseStation.numerologyIndex = ${u}

############# Simulated traffic configuration #################
*.ue.numApps = 1
*.server.numApps = 1 

# --- Observed traffic --- #
*.server.app[0].typename = "UdpEchoApp"
*.server.app[0].localPort = 5000
*.ue.app[0].typename = "UdpBasicApp"
*.ue.app[0].destAddresses = "server" 
*.ue.app[0].destPort = 5000+ancestorIndex(0)
*.ue.app[0].localPort = 6000+ancestorIndex(0)
*.ue.app[0].startTime = uniform(0s,0.5s)
*.ue.app[0].messageLength = ${msgLen=1000}B
*.ue.app[0].sendInterval = ${sndInt=40ms}

**.bgUE[*].mobility.rng-0 = 1

############# Background traffic configuration #################
*.gnb.cellularNic.bgTrafficGenerator[0].enablePeriodicCqiUpdate = ${periodicCqi=true}
*.gnb.cellularNic.bgTrafficGenerator[0].useRandomCqi = ${randomCqi=false,true}
*.gnb.cellularNic.bgTrafficGenerator[0].useAvgInterference = true
*.gnb.cellularNic.bgTrafficGenerator[0].numBgUes = ${numBkUEs=75}
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].trafficGeneratorType = "TrafficGeneratorCbr"
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.startTimeDl = uniform(0s,0.5s)
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.startTimeUl = uniform(0s,0.5s)
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.packetSizeDl = ${msgLen}B
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.packetSizeUl = ${msgLen}B
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.headerLen = 29B
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.periodDl = ${sndInt}
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.periodUl = ${sndInt}
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].mobility.initialX = uniform(750m,1250m)
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].mobility.initialY = uniform(750m,1250m)

*.bgCell[*].bgTrafficGenerator.enablePeriodicCqiUpdate = ${periodicCqi}
*.gnb.cellularNic.bgTrafficGenerator[0].useRandomCqi = ${randomCqi}
*.bgCell[*].bgTrafficGenerator.useAvgInterference = true
*.bgCell[*].bgTrafficGenerator.numBgUes = ${numBkUEs}
*.bgCell[*].bgTrafficGenerator.bgUE[*].trafficGeneratorType = "TrafficGeneratorCbr"
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.startTimeDl = uniform(0s,0.5s)
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.startTimeUl = uniform(0s,0.5s)
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.packetSizeDl = ${msgLen}B
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.packetSizeUl = ${msgLen}B
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.periodDl = ${sndInt}
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.periodUl = ${sndInt}
*.bgCell[0].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(500m,1000m)
*.bgCell[0].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(317m,817m)
*.bgCell[1].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(1250m,1750m)
*.bgCell[1].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(750m,1250m)
*.bgCell[2].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(500m,1000m)
*.bgCell[2].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(1183m,1933m)
*.bgCell[3].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(1000m,1500m)
*.bgCell[3].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(317m,817m)
*.bgCell[4].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(1000m,1500m)
*.bgCell[4].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(1183m,1933m)
*.bgCell[5].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(250m,750m)
*.bgCell[5].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(750m,1250m)

include trafficGeneratorConfig.ini

output-scalar-file = ${resultdir}/${configname}/u=${u}-rbs=${rbs}-msgLen=${msgLen}-sndInt=${sndInt}-bkUEs=${numBkUEs}-ueDist=${dist}-randomCqi=${randomCqi}-${repetition}.sca
output-vector-file = ${resultdir}/${configname}/u=${u}-rbs=${rbs}-msgLen=${msgLen}-sndInt=${sndInt}-bkUEs=${numBkUEs}-ueDist=${dist}-randomCqi=${randomCqi}-${repetition}.vec


[Config BgMulticellValidation-simulated-test]
extends = BgMulticellValidation-simulated
**.fading = true
**.shadowing = true

[Config BgMulticellValidation-generated-test]
extends = BgMulticellValidation-generated
**.fading = true
**.shadowing = true





# Multi Cell configuration
# 
# The central cell is surrounded by one tier of gNBs. Each surrounding
# gNB has a number of bgUEs
[Config MultiCellBackground]
network = simu5g.emulation.pimrc_extension.ExtClientServerMulticell2
sim-time-limit = 3s
############# Simulated traffic configuration #################
*.ue.numApps = 1
*.server.numApps = 1 

*.server.app[*].typename = "UdpEchoApp"
*.server.app[*].localPort = 5000+ancestorIndex(0)

*.ue.app[*].typename = "UdpBasicApp"
*.ue.app[*].destAddresses = "10.0.4.2" 
*.ue.app[*].destPort = 5000+ancestorIndex(0)
*.ue.app[*].localPort = 6000+ancestorIndex(0)
*.ue.app[*].startTime = uniform(0s,0.02s)
*.ue.app[*].messageLength = ${msgLen=1000B}
*.ue.app[*].sendInterval = ${sndInt=40ms}   # 200 kbps

**.downlink_interference = true
**.uplink_interference = true
**.extCell_interference = false
**.bgCell_interference = true

############### gNodeBs configuration #################

**.mobility.constraintAreaMaxX = 2000m
**.mobility.constraintAreaMaxY = 2000m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 0m
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.initFromDisplayString = false


*.gnb.mobility.initialX = 1000m
*.gnb.mobility.initialY = 1000m
*.bgCell[0].mobility.initialX = 750m
*.bgCell[0].mobility.initialY = 567m
*.bgCell[1].mobility.initialX = 1500m
*.bgCell[1].mobility.initialY = 1000m
*.bgCell[2].mobility.initialX = 750m
*.bgCell[2].mobility.initialY = 1433m
*.bgCell[3].mobility.initialX = 1250m
*.bgCell[3].mobility.initialY = 567m
*.bgCell[4].mobility.initialX = 1250m
*.bgCell[4].mobility.initialY = 1433m
*.bgCell[5].mobility.initialX = 500m
*.bgCell[5].mobility.initialY = 1000m

############## ue configuration ##################
# connect the ue's NIC to the corresponding serving gnb
*.ue*.macCellId = 0
*.ue*.masterId = 0
*.ue*.nrMacCellId = 1
*.ue*.nrMasterId = 1

# ue position
*.ue*.mobilityType = "StationaryMobility"
*.ue*.mobility.initialX = 1000m
*.ue*.mobility.initialY = 1050m

############### CA configuration ######################## 
*.carrierAggregation.numComponentCarriers = 1
#*.carrierAggregation.componentCarrier[0].numerologyIndex = 0
#*.carrierAggregation.componentCarrier[0].numBands = 10
*.carrierAggregation.componentCarrier[0].carrierFrequency = 2GHz

*.numBgCell = ${numBgGnbs=6}
*.gnb.cellularNic.bgTrafficGenerator[0].numBgUes = ${bgUes=200}
*.bgCell[*].bgTrafficGenerator.numBgUes = ${bgUes}
*.carrierAggregation.componentCarrier[0].numBands = ${numBands=100}
*.carrierAggregation.componentCarrier[0].numerologyIndex = 4

*.gnb.cellularNic.numCarriers = 1
*.gnb.cellularNic.channelModel[0].componentCarrierIndex = 0
*.ue.cellularNic.numNRCarriers = 1
*.ue.cellularNic.nrChannelModel[0].componentCarrierIndex = 0

*.bgCell[*].bgBaseStation.isNr = true
*.bgCell[*].bgBaseStation.numBands = ${numBands}
*.bgCell[*].bgBaseStation.carrierFrequency = 2GHz
*.bgCell[*].bgBaseStation.numerologyIndex = 4

**.maxDataRatePerRb = 18.56Mbps

############### Phy layer parameters ################
**.amcType = "NRAmc"
**.pilotMode = "MIN_CQI" 
**.targetBler = 0.01
**.blerShift = 5  
**.fbPeriod = 40 

############# Background traffic configuration #################
*.gnb.cellularNic.bgTrafficGenerator[0].enablePeriodicCqiUpdate = ${periodicUpdate=true,false}
*.gnb.cellularNic.bgTrafficGenerator[0].useAvgInterference = true
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].trafficGeneratorType = "TrafficGeneratorCbr"
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.startTimeDl = uniform(0s,0.04s)
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.startTimeUl = uniform(0s,0.04s)
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.packetSizeDl = 1000B
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.packetSizeUl = 1000B
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.periodDl = 0.04s
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.periodUl = 0.04s
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].mobility.initialX = uniform(750m,1250m)
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].mobility.initialY = uniform(750m,1250m)

*.bgCell[*].bgTrafficGenerator.enablePeriodicCqiUpdate = ${periodicUpdate}
*.bgCell[*].bgTrafficGenerator.useAvgInterference = true
*.bgCell[*].bgTrafficGenerator.bgUE[*].trafficGeneratorType = "TrafficGeneratorCbr"
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.startTimeDl = uniform(0s,0.04s)
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.startTimeUl = uniform(0s,0.04s)
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.packetSizeDl = 1000B
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.packetSizeUl = 1000B
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.periodDl = 0.04s
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.periodUl = 0.04s
*.bgCell[0].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(500m,1000m)
*.bgCell[0].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(317m,817m)
*.bgCell[1].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(1250m,1750m)
*.bgCell[1].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(750m,1250m)
*.bgCell[2].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(500m,1000m)
*.bgCell[2].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(1183m,1933m)
*.bgCell[3].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(1000m,1500m)
*.bgCell[3].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(317m,817m)
*.bgCell[4].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(1000m,1500m)
*.bgCell[4].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(1183m,1933m)
*.bgCell[5].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(250m,750m)
*.bgCell[5].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(750m,1250m)

############### Statistics ##################
output-scalar-file = ${resultdir}/${configname}/periodicUpdate=${periodicUpdate}-bgUEs=${bgUes}-rbs=${numBands}-${repetition}.sca
output-vector-file = ${resultdir}/${configname}/periodicUpdate=${periodicUpdate}-bgUEs=${bgUes}-rbs=${numBands}-${repetition}.vec















