##[General]
##image-path=../../images
##output-scalar-file-append = false
##sim-time-limit=50s
##network = lte.simulations.NR.mec_rest.RNIDelay.MecNetwork2Cell
##**.routingRecorder.enabled = false
##**.vector-recording = false
##seed-set = ${repetition}
##
###**.lteNic.channelModel[0].downlink_interference = true
##
##**.lteNic.channelModel[0].shadowing = false
##**.lteNic.channelModel[0].fading = false
##
################## Mobility parameters #####################
### *
##
##**.mobility.constraintAreaMaxX = 1000m
##**.mobility.constraintAreaMaxY = 1000m
##**.mobility.constraintAreaMinX = 0m
##**.mobility.constraintAreaMinY = 0m
##**.mobility.constraintAreaMinZ = 0m
##**.mobility.constraintAreaMaxZ = 0m
##**.mobility.initFromDisplayString = false
##
##*.playgroundSizeX = 1100m
##*.playgroundSizeY = 800m
##*.playgroundSizeZ = 50m
################# Number of Resource Blocks ################
##**.numBands = 6 
##
################# Transmission Power ##################
##**.ueTxPower = 26
##**.eNodeBTxPower = 40
##
################# IPv4 configurator config #################
##*.configurator.config = xmldoc("./demo.xml")
##
##**.hasRNISupport = true
##
### enable handover
###**.lteNic.nrPhy.enableHandover = true
##*.gNodeB*.lteNic.phy.enableHandover = true
##
###**.gNodeB*.lteNic.nrPhy.targetBler = 0.004
##
### X2 configuration
##*.gNodeB*.numX2Apps = 1    # one x2App per peering eNodeB
##*.gNodeB*.x2App[*].server.localPort = 5000 + ancestorIndex(1) # Server ports (x2App[0]=5000, x2App[1]=5001, ...)
##*.gNodeB1.x2App[0].client.connectAddress = "gNodeB2%x2ppp0" 
##*.gNodeB2.x2App[0].client.connectAddress = "gNodeB1%x2ppp0" 
#
#[General]
#image-path=../../images
#output-scalar-file-append = false
#sim-time-limit=20s
#network = lte.simulations.NR.mec_rest.RNIDelay.MecNetwork2Cell
#**.routingRecorder.enabled = false
#**.vector-recording = true
#
#**.lteNic.channelModel[0].shadowing = false
#**.lteNic.channelModel[0].fading = false
#
################# Mobility parameters #####################
## *
#**.mobility.constraintAreaMinZ = 0m
#**.mobility.constraintAreaMaxZ = 0m
#**.mobility.initFromDisplayString = true
#
################ Number of Resource Blocks ################
#**.numBands = 25 
#
################ Transmission Power ##################
#**.ueTxPower = 26
#**.eNodeBTxPower = 40
#
################ IPv4 configurator config #################
#*.configurator.config = xmldoc("./demo.xml")
#
#
#**.hasRNISupport = true
#
##############################################################
## Test configuration for handover                           #
##                                                           #
## In this scenario, we consider two eNBs (gNodeB1 and       #
## gNodeB2), which serve two UEs each, at the beginning of   #
## the simulation. ue11 and ue12 are moving from gNodeB1 to  #
## gNodeB2, triggering the handover procedure                #
##############################################################
#[Config Handover-General]
## connect each UE to the gNB only
#
## enable handover
#*.gNodeB*.lteNic.phy.enableHandover = true
#*.car[*].lteNic.nrPhy.enableHandover = true
#
#
## X2 configuration
#*.gNodeB*.numX2Apps = 1    # one x2App per peering gNodeB
#*.gNodeB*.x2App[*].server.localPort = 5000 + ancestorIndex(1) # Server ports (x2App[0]=5000, x2App[1]=5001, ...)
#*.gNodeB1.x2App[0].client.connectAddress = "gNodeB2%x2ppp0" 
#*.gNodeB2.x2App[0].client.connectAddress = "gNodeB1%x2ppp0" 
#
## positioning and mobility
#**.mobility.initFromDisplayString = false
#
#*.gNodeB1.mobility.initialX  = 300m
#*.gNodeB1.mobility.initialY = 300m
#
#*.gNodeB2.mobility.initialX  = 500m
#*.gNodeB2.mobility.initialY = 300m
#
#
#[Config VoIP-DL]
#extends=Handover-General
#sim-time-limit=20s
#*.configurator.dumpAddresses = true
#
## Schedulers
#**.mac.schedulingDisciplineDl = "MAXCI"
#**.mac.schedulingDisciplineUl = "MAXCI"
#
## one UDP application for each user
#*.car[*].numApps = 1
#
#*.numCars = ${numCars=1,5, 15,50,100}
#**.vector-recording = true
#
## the amount of UDP applications on server should be equal to (numUEs)*(car[*].numApps) 
#*.server.numApps = ${numCars}
#
## connect each UE to the eNB
#*.car[0].nrMacCellId = 1
#*.car[0].nrMasterId = 1
#
## connect each UE to the eNB
#*.car[0].macCellId = 0
#*.car[0].masterId = 0
#
#*.car[*].lteNic.nrPhy.enableHandover = true
#
#
#*.car[0].mobility.initialX = uniform(200m,250m)
#*.car[0].mobility.initialY = uniform(200m,400m)
#
#
#*.car[0].mobility.speed = 50mps
#*.car[0].mobility.initialMovementHeading = 0deg
#*.car[0].mobilityType = "LinearMobility"
#*.car[0].mobility.constraintAreaMinX = 180m
#*.car[0].mobility.constraintAreaMaxX = 700m
#
#
#
## connect each UE to the eNB
#**.car[1..].nrMacCellId = 2
#**.car[1..].nrMasterId = 2
#
## connect each UE to the eNB
#**.car[1..].macCellId = 0
#**.car[1..].masterId = 0
#
#
#
## positioning and mobility
##*.car[*].mobility.initialMovementHeading = uniform(0deg, 360deg)
#*.car[*].mobility.constraintAreaMaxX = 1000m
#*.car[*].mobility.constraintAreaMaxY = 1000m
#*.car[*].mobility.constraintAreaMinX = 0m
#*.car[*].mobility.constraintAreaMinY = 0m
#*.car[*].mobility.initFromDisplayString = false
#*.car[1..].mobility.initialX = uniform(400m,600m)
#*.car[1..].mobility.initialY = uniform(200m,400m)
#
#
#*.gNodeB1.mobility.initialX  = 300m
#*.gNodeB1.mobility.initialY = 300m
#
#*.gNodeB2.mobility.initialX  = 500m
#*.gNodeB2.mobility.initialY = 300m
#
#
#
##*.car[*].mobility.initialZ = 0m
##*.car[*].mobility.speed = 1mps
##*.car[*].mobilityType = "LinearMobility"
#
#
##============= Application Setup =============
#*.car[*].app[0].typename = "VoIPReceiver"
#*.car[*].app[0].localPort = 3000
#
#*.server.app[*].typename = "VoIPSender"
#*.server.app[*].PacketSize = 40
#*.server.app[*].destAddress = "car["+string(ancestorIndex(0))+"]" # obtain the address of the client by reading its index in the array of udp Apps
#*.server.app[*].destPort = 3000
#*.server.app[*].localPort = 3088+ancestorIndex(0) 
#*.server.app[*].startTime = uniform(0s,0.02s)
##------------------------------------#
#
#

[General]
image-path=../../images
output-scalar-file-append = false
sim-time-limit=20s
num-rngs = 3
network = lte.simulations.NR.mec_rest.prova_Nardini.MultiCell
**.routingRecorder.enabled = false
**.vector-recording = true

**.lteNic.channelModel[0].shadowing = false
**.lteNic.channelModel[0].fading = false


##########################################################
#              NR specific parameters                   #
##########################################################
*.gNodeB*.cellInfo.broadcastMessageInterval = 0.5s
**.fbPeriod = 40   # reports CQI every 40ms
**.amcType = "NRAmc"
**.pilotMode = "ROBUST_CQI" 
**.targetBler = 0.01
**.blerShift = 5  


################ Mobility parameters #####################
# *
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.initFromDisplayString = true

############### Number of Resource Blocks ################
**.numBands = 6

############### Transmission Power ##################
**.ueTxPower = 26
**.eNodeBTxPower = 30

############### IPv4 configurator config #################
*.configurator.config = xmldoc("./demo.xml")


######################_ME Host Side_#####################
# resources available
*.meHost.maxMEApps = 100												#max ME Apps to instantiate
*.meHost.maxRam = 32GB													#max KBytes of Ram Space 
*.meHost.maxDisk = 100TB												#max KBytes of Ram Space 
*.meHost.maxCpu = 1														#max percentage of CPU
#----------------------------------------
**.gNodeB*.meHost = "meHost"
#

#-------REST Service:---------------
**.hasRNISupport = true
*.meHost.mePlatform.numRESTServices = 1
*.meHost.mePlatform.app[0].typename = "RNIService"
*.meHost.mePlatform.app[0].localAddress = "meHost.mePlatform" #da cambiare!!
*.meHost.mePlatform.app[0].localPort = 10020

*.meHost.mePlatform.app[0].rng-0 = 0 # request service time
*.meHost.mePlatform.app[0].rng-1 = 1 # subscription service time
*.meHost.mePlatform.app[0].requestServiceTime = 20
*.meHost.mePlatform.app[0].subscriptionServiceTime = 11s

#############################################################
# Test configuration for handover                           #
#                                                           #
# In this scenario, we consider two eNBs (gNodeB1 and       #
# gNodeB2), which serve two UEs each, at the beginning of   #
# the simulation. ue11 and ue12 are moving from gNodeB1 to  #
# gNodeB2, triggering the handover procedure                #
#############################################################
[Config Handover-General]
# connect each UE to the gNB only
**.ue*.masterId = 0
**.ue*.macCellId = 0

**.ue1*.nrMacCellId = 1
**.ue1*.nrMasterId = 1
**.ue2*.nrMacCellId = 2
**.ue2*.nrMasterId = 2

# enable handover
*.gNodeB*.lteNic.phy.enableHandover = true
*.ue*.lteNic.nrPhy.enableHandover = true


# X2 configuration
*.gNodeB*.numX2Apps = 1    # one x2App per peering gNodeB
*.gNodeB*.x2App[*].server.localPort = 5000 + ancestorIndex(1) # Server ports (x2App[0]=5000, x2App[1]=5001, ...)
*.gNodeB1.x2App[0].client.connectAddress = "gNodeB2%x2ppp0" 
*.gNodeB2.x2App[0].client.connectAddress = "gNodeB1%x2ppp0" 

# positioning and mobility
**.mobility.initFromDisplayString = false

*.gNodeB1.mobility.initialX  = 300m
*.gNodeB1.mobility.initialY = 300m

*.gNodeB2.mobility.initialX  = 500m
*.gNodeB2.mobility.initialY = 300m


# ue11 and ue12 cross the cell border repeatedly
*.ue11.mobility.initialX = 350m
*.ue11.mobility.initialY = 280m
*.ue11.mobility.speed = 0mps
*.ue11.mobility.initialMovementHeading = 0deg
*.ue11.mobilityType = "LinearMobility"
*.ue11.mobility.constraintAreaMinX = 250m
*.ue11.mobility.constraintAreaMaxX = 450m

*.ue12.mobility.initialX = 320m
*.ue12.mobility.initialY = 280m
*.ue12.mobility.speed = 0mps
*.ue12.mobility.initialMovementHeading = 0deg
*.ue12.mobilityType = "LinearMobility"
*.ue12.mobility.constraintAreaMinX = 250m
*.ue12.mobility.constraintAreaMaxX = 450m

# ue21 and ue22 are static
*.ue*.mobility.constraintAreaMaxX = 750m
*.ue*.mobility.constraintAreaMaxY = 400m
*.ue*.mobility.constraintAreaMinX = 50m
*.ue*.mobility.constraintAreaMinY = 100m
*.ue2*.mobility.initialX = uniform(450m,750m)
*.ue2*.mobility.initialY = uniform(100m,400m)
*.ue*.mobility.initialZ = 0m


[Config VoIP-DL2]
extends=Handover-General
sim-time-limit=25s


*.numCars = ${numCars=1,5, 15,50,100}
**.vector-recording = true

**.ue[0].nrMacCellId = 1
**.ue[0].nrMasterId = 1

# connect each UE to the eNB
**.ue[0].macCellId = 0
**.ue[0].masterId = 0


# connect each UE to the eNB
**.ue[1..].nrMacCellId = 2
**.ue[1..].nrMasterId = 2

# connect each UE to the eNB
**.ue[1..].macCellId = 0
**.ue[1..].masterId = 0


*.ue[0].mobility.initialX = uniform(200m,250m)
*.ue[0].mobility.initialY = uniform(200m,400m)


*.ue[0].mobility.speed = 20mps
*.ue[0].mobility.initialMovementHeading = 0deg
*.ue[0].mobilityType = "LinearMobility"
*.ue[0].mobility.constraintAreaMinX = 180m
*.ue[0].mobility.constraintAreaMaxX = 500m


# positioning and mobility
#*.ue[*].mobility.initialMovementHeading = uniform(0deg, 360deg)
*.ue[*].mobility.constraintAreaMaxX = 1000m
*.ue[*].mobility.constraintAreaMaxY = 1000m
*.ue[*].mobility.constraintAreaMinX = 0m
*.ue[*].mobility.constraintAreaMinY = 0m
*.ue[*].mobility.initFromDisplayString = false
*.ue[1..].mobility.initialX = uniform(400m,600m)
*.ue[1..].mobility.initialY = uniform(200m,400m)



#============= Application Setup =============

*.ue[*].numApps = 1

*.ue[0].app[0].typename = "UERniDelayApp"
*.ue[0].app[0].startTime = 0s										#when sending start warning alert app
*.ue[0].app[0].period = 0.1s										#period to sending messages
*.ue[0].app[0].stopTime = 40s										#when sending stop MEC warning alert app
*.ue[0].app[0].destAddress = "meHost.virtualisationInfrastructure"
*.ue[0].app[0].requiredRam = 10MB
*.ue[0].app[0].requiredDisk = 10MB
*.ue[0].app[0].requiredCpu = 0.01



#**.ue[0..].app[*].typename = "UdpVideoStreamClient"
#**.ue[0..].app[*].serverAddress = "server"
#**.ue[0..].app[*].localPort = 9999
#**.ue[0..].app[*].serverPort = 3088
#**.ue[0..].app[*].startTime = uniform(0s, 0.02s)


#----------------------------------------
# the amount of UDP applications on server should be equal to (numUEs)*(ue[*].numApps) 
*.server.numApps = 1# ${numCars} -1

**.ue[1..].app[*].typename = "UdpVideoStreamClient"
**.ue[1..].app[*].serverAddress = "server"
**.ue[1..].app[*].localPort = 9999
**.ue[1..].app[*].serverPort = 3088
**.ue[1..].app[*].startTime = uniform(0s, 0.02s)

**.server.app[*].typename = "UdpVideoStreamServer"
**.server.app[*].videoSize = 200MiB
**.server.app[*].localPort = 3088
**.server.app[*].sendInterval = 500ms
#**.server.app[*].packetLen = ${packetLen = 100B, 200B, 300B, 400B, 500B, 600B, 700B, 800B, 900B, 1KiB, 1.5KiB, 2KiB, 5KiB }
**.server.app[*].packetLen = ${packetLen = 100B }
**.mtu = 10000B


##
#*.ue[1..].app[*].typename = "VoIPReceiver"
#*.ue[1..].app[0].localPort = 3000
#
#*.server.app[*].typename = "VoIPSender"
#*.server.app[*].PacketSize = 40
#*.server.app[*].destAddress = "ue["+string(ancestorIndex(0)+1)+"]" # obtain the address of the client by reading its index in the array of udp Apps
#*.server.app[*].destPort = 3000
#*.server.app[*].localPort = 3088+ancestorIndex(0) 
#*.server.app[*].startTime = uniform(0s,0.02s)


# ------------- Config VoIP-DL ----------------- #
#
# Downlink communication from Internet to ue11
#
[Config VoIP-DL]
extends=Handover-General

*.ue11.numApps = 1
*.server.numApps = 1

#============= Application Setup =============
*.ue11.app[*].typename = "VoIPReceiver"

*.server.app[*].destAddress = "ue11" 
*.server.app[*].localPort = 3088+ancestorIndex(0) 
*.server.app[*].typename = "VoIPSender"
*.server.app[*].startTime = 0.01s
#------------------------------------#


# ------------- Config VoIP-UL ----------------- #
#
# Uplink communication from ue11 to Internet
#
[Config VoIP-UL]
extends=Handover-General

*.ue11.numApps = 1
*.server.numApps = 1

#============= Application Setup =============
*.ue11.app[*].typename = "VoIPSender"
*.ue11.app[*].destAddress = "server"
*.ue11.app[*].destPort = 3088
*.ue11.app[*].startTime = 0.01s

*.server.app[*].typename = "VoIPReceiver"
*.server.app[*].localPort = 3088 
#------------------------------------#





